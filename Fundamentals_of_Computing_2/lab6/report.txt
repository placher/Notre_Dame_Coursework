report.txt for Lab 6
J. Patrick Lacher

This week we used the puzzle class from last week to implement a solver for sudoku puzzles stored in .txt files. From the user's
perspective, the program is relatively simple. The user is prompted for a .txt file in the current directory containing the sudoku
puzzle to be solved. The user is then presented with the solution generated by the solver algorithm or notified if the solution is
incompletable by the algorithm and given the partially-obtainable solution.

From a programming perspective, the program uses the puzzle class to store the game board and a 3-dimensional vector to store all
possible values that are enterable in the current state of the board. The program then uses a while loop to check for any vectors
in the possible array that contain only one non-zero value and placing them in the board, as these answers must be correct, as
they are the only legal moves available. If there are no legal single possibility moves in a "turn", the program will additionally
check for "singleton" values in the possible array, or values that are only possible in one position, even thogh there are
multiple legal moves for that cell on the game board. After these moves are made, the vector of possible moves for each cell is
cleared and recalculated, and the while loop is quit if either the game is completed or no more moves are legally possible (the
puzzle is unsolvable by the algorithm).

The program was verified for accuracy by using a number of test puzzles with known solutions. The solutions generated by the
program were compared to the known solution for the puzzles to ensure that the program performed as designed. Puzzles other than
those provided on Piazza were also used to ensure that the correct results were not simply a bugged output.

Based on the test puzzles, the algorithm clearly works effectively. The only thing bothering me is that my code for evaluating
singletons is a little more verbose than I would have liked. I'm sure that there is a simpler way to accomplish this, but I
couldn't come up with a "cleaner" solution to the searches that need to be implemented. Using the puzzle.h class from last week
saved a lot of time in managing the game board, leaving me to focus on the solver algorithm.

I would appreciate it if you would test my solver on the extra credit boards as well as the normal test boards.